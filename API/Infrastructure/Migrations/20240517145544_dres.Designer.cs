// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240517145544_dres")]
    partial class dres
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Admin", b =>
                {
                    b.Property<Guid>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminAdresa")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("AdminBrojTelefona")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("AdminIme")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("AdminKorisnickoIme")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("AdminLozinka")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("AdminPrezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("AdminId");

                    b.HasIndex("AdminEmail")
                        .IsUnique();

                    b.HasIndex("AdminKorisnickoIme")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Core.Entities.Dres", b =>
                {
                    b.Property<Guid>("DresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brend")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("Cena")
                        .HasColumnType("float");

                    b.Property<string>("ImeIgraca")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("Obrisan")
                        .HasColumnType("bit");

                    b.Property<string>("Sezona")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SlikaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Takmicenje")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Tim")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TimUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Zemlja")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("DresId");

                    b.HasIndex("AdminId");

                    b.ToTable("Dress", t =>
                        {
                            t.HasCheckConstraint("CHK_Status", "Status IN ('na stanju', 'nedostupno')");
                        });
                });

            modelBuilder.Entity("Core.Entities.Kupac", b =>
                {
                    b.Property<Guid>("KupacId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KupacAdresa")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("KupacBrojTelefona")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("KupacEmail")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("KupacIme")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("KupacKorisnickoIme")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("KupacLozinka")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("KupacPrezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("KupacId");

                    b.HasIndex("KupacEmail")
                        .IsUnique();

                    b.HasIndex("KupacKorisnickoIme")
                        .IsUnique();

                    b.ToTable("Kupacs");
                });

            modelBuilder.Entity("Core.Entities.Porudzbina", b =>
                {
                    b.Property<Guid>("PorudzbinaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DatumAzuriranja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KupacId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Placena")
                        .HasColumnType("bit");

                    b.Property<double>("UkupanIznos")
                        .HasColumnType("float");

                    b.HasKey("PorudzbinaId");

                    b.HasIndex("KupacId");

                    b.ToTable("Porudzbinas");
                });

            modelBuilder.Entity("Core.Entities.StavkaPorudzbine", b =>
                {
                    b.Property<Guid>("StavkaPorudzbineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BrojStavki")
                        .HasColumnType("int");

                    b.Property<Guid>("PorudzbinaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VelicinaDresaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StavkaPorudzbineId");

                    b.HasIndex("PorudzbinaId");

                    b.HasIndex("VelicinaDresaId");

                    b.ToTable("StavkaPorudzbines", null, t =>
                        {
                            t.HasTrigger("Triger1");
                        });
                });

            modelBuilder.Entity("Core.Entities.VelicinaDresa", b =>
                {
                    b.Property<Guid>("VelicinaDresaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DresId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.Property<string>("VelicinaDresaVrednost")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("VelicinaDresaId");

                    b.HasIndex("DresId");

                    b.ToTable("VelicinaDresas");
                });

            modelBuilder.Entity("Core.Entities.Dres", b =>
                {
                    b.HasOne("Core.Entities.Admin", "Admin")
                        .WithMany("Dress")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Core.Entities.Porudzbina", b =>
                {
                    b.HasOne("Core.Entities.Kupac", "Kupac")
                        .WithMany("Porudzbinas")
                        .HasForeignKey("KupacId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kupac");
                });

            modelBuilder.Entity("Core.Entities.StavkaPorudzbine", b =>
                {
                    b.HasOne("Core.Entities.Porudzbina", "Porudzbina")
                        .WithMany("StavkaPorudzbines")
                        .HasForeignKey("PorudzbinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.VelicinaDresa", "VelicinaDresa")
                        .WithMany("StavkaPorudzbines")
                        .HasForeignKey("VelicinaDresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Porudzbina");

                    b.Navigation("VelicinaDresa");
                });

            modelBuilder.Entity("Core.Entities.VelicinaDresa", b =>
                {
                    b.HasOne("Core.Entities.Dres", "Dres")
                        .WithMany("VelicinaDresas")
                        .HasForeignKey("DresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dres");
                });

            modelBuilder.Entity("Core.Entities.Admin", b =>
                {
                    b.Navigation("Dress");
                });

            modelBuilder.Entity("Core.Entities.Dres", b =>
                {
                    b.Navigation("VelicinaDresas");
                });

            modelBuilder.Entity("Core.Entities.Kupac", b =>
                {
                    b.Navigation("Porudzbinas");
                });

            modelBuilder.Entity("Core.Entities.Porudzbina", b =>
                {
                    b.Navigation("StavkaPorudzbines");
                });

            modelBuilder.Entity("Core.Entities.VelicinaDresa", b =>
                {
                    b.Navigation("StavkaPorudzbines");
                });
#pragma warning restore 612, 618
        }
    }
}
